/*
 * RedBlackTree.java 2018年3月23日
 * Copyright (c) 2015-2018, Jv Bo (programmer_jv_bo@163.com).
 */
package com.jvbo.common.structure.tree.redblack;

/**
 * 红黑树(对称二叉B树)
 * @ClassName: RedBlackTree 
 * @Description: TODO
 * @author jvbo
 * @date 2018年3月23日
 */
public class RedBlackTree {
    
    /**
     * 定义:一种二叉查找树,但在每个节点上增加一个存储位标识节点的颜色,可以是红或黑,
	 * 通过对任何一条从根到叶子的路径上各个节点着色方式的限制,红黑树确保没有一条路径会比其他路径长出两倍,
	 * 因而是接近平衡的;
	 *
	 * 红黑树是一种自平衡排序二叉树,树中的每个节点的值,都大于或等于在它的左子树中的所有节点的值,
	 * 并且小于或等于在它的右子树中的所有节点的值,这确保红黑树运行时可以快速的在树中查找和定位所需的节点;
     * 
     * 黑色高度:从根节点到叶节点的路径上黑色节点的个数;
     * 
     * 5个特性:
     * 1. 每个节点是红色或黑色;
     * 2. 根节点是黑色;
     * 3. 所有叶子都是黑色(叶子是NIL节点)[这里叶子节点,是指为空(NIL或NULL)的叶子节点];
     * 4. 每个红色节点必须有两个黑色的子节点(如果一个节点是红色的,则它的子节点必须是黑色的)
	 * 	  (从每个叶子到根的所有路径上不能有两个连续的红色节点);
     * 5. 从任一节点到其每个叶子的所有简单路径都包含相同数目的黑色节点;
     */

}
