/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package site.jvbo.fun.okex.crawler.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class OkexSpotTickerAvro extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4351632560702724325L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"OkexSpotTickerAvro\",\"namespace\":\"site.jvbo.fun.okex.crawler.avro\",\"fields\":[{\"name\":\"timestamp\",\"type\":[\"long\",\"null\"]},{\"name\":\"market\",\"type\":[\"string\",\"null\"]},{\"name\":\"symbol\",\"type\":[\"string\",\"null\"]},{\"name\":\"data\",\"type\":{\"type\":\"record\",\"name\":\"OkexSpotTickerDataAvro\",\"fields\":[{\"name\":\"high\",\"type\":[\"string\",\"null\"]},{\"name\":\"vol\",\"type\":[\"string\",\"null\"]},{\"name\":\"last\",\"type\":[\"string\",\"null\"]},{\"name\":\"low\",\"type\":[\"string\",\"null\"]},{\"name\":\"buy\",\"type\":[\"string\",\"null\"]},{\"name\":\"change\",\"type\":[\"string\",\"null\"]},{\"name\":\"sell\",\"type\":[\"string\",\"null\"]},{\"name\":\"dayLow\",\"type\":[\"string\",\"null\"]},{\"name\":\"close\",\"type\":[\"string\",\"null\"]},{\"name\":\"dayHigh\",\"type\":[\"string\",\"null\"]},{\"name\":\"open\",\"type\":[\"string\",\"null\"]},{\"name\":\"timestamp\",\"type\":[\"long\",\"null\"]}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<OkexSpotTickerAvro> ENCODER =
      new BinaryMessageEncoder<OkexSpotTickerAvro>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<OkexSpotTickerAvro> DECODER =
      new BinaryMessageDecoder<OkexSpotTickerAvro>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<OkexSpotTickerAvro> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<OkexSpotTickerAvro> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<OkexSpotTickerAvro>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this OkexSpotTickerAvro to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a OkexSpotTickerAvro from a ByteBuffer. */
  public static OkexSpotTickerAvro fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.Long timestamp;
  @Deprecated public java.lang.CharSequence market;
  @Deprecated public java.lang.CharSequence symbol;
  @Deprecated public site.jvbo.fun.okex.crawler.avro.OkexSpotTickerDataAvro data;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public OkexSpotTickerAvro() {}

  /**
   * All-args constructor.
   * @param timestamp The new value for timestamp
   * @param market The new value for market
   * @param symbol The new value for symbol
   * @param data The new value for data
   */
  public OkexSpotTickerAvro(java.lang.Long timestamp, java.lang.CharSequence market, java.lang.CharSequence symbol, site.jvbo.fun.okex.crawler.avro.OkexSpotTickerDataAvro data) {
    this.timestamp = timestamp;
    this.market = market;
    this.symbol = symbol;
    this.data = data;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return timestamp;
    case 1: return market;
    case 2: return symbol;
    case 3: return data;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: timestamp = (java.lang.Long)value$; break;
    case 1: market = (java.lang.CharSequence)value$; break;
    case 2: symbol = (java.lang.CharSequence)value$; break;
    case 3: data = (site.jvbo.fun.okex.crawler.avro.OkexSpotTickerDataAvro)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public java.lang.Long getTimestamp() {
    return timestamp;
  }

  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(java.lang.Long value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'market' field.
   * @return The value of the 'market' field.
   */
  public java.lang.CharSequence getMarket() {
    return market;
  }

  /**
   * Sets the value of the 'market' field.
   * @param value the value to set.
   */
  public void setMarket(java.lang.CharSequence value) {
    this.market = value;
  }

  /**
   * Gets the value of the 'symbol' field.
   * @return The value of the 'symbol' field.
   */
  public java.lang.CharSequence getSymbol() {
    return symbol;
  }

  /**
   * Sets the value of the 'symbol' field.
   * @param value the value to set.
   */
  public void setSymbol(java.lang.CharSequence value) {
    this.symbol = value;
  }

  /**
   * Gets the value of the 'data' field.
   * @return The value of the 'data' field.
   */
  public site.jvbo.fun.okex.crawler.avro.OkexSpotTickerDataAvro getData() {
    return data;
  }

  /**
   * Sets the value of the 'data' field.
   * @param value the value to set.
   */
  public void setData(site.jvbo.fun.okex.crawler.avro.OkexSpotTickerDataAvro value) {
    this.data = value;
  }

  /**
   * Creates a new OkexSpotTickerAvro RecordBuilder.
   * @return A new OkexSpotTickerAvro RecordBuilder
   */
  public static site.jvbo.fun.okex.crawler.avro.OkexSpotTickerAvro.Builder newBuilder() {
    return new site.jvbo.fun.okex.crawler.avro.OkexSpotTickerAvro.Builder();
  }

  /**
   * Creates a new OkexSpotTickerAvro RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new OkexSpotTickerAvro RecordBuilder
   */
  public static site.jvbo.fun.okex.crawler.avro.OkexSpotTickerAvro.Builder newBuilder(site.jvbo.fun.okex.crawler.avro.OkexSpotTickerAvro.Builder other) {
    return new site.jvbo.fun.okex.crawler.avro.OkexSpotTickerAvro.Builder(other);
  }

  /**
   * Creates a new OkexSpotTickerAvro RecordBuilder by copying an existing OkexSpotTickerAvro instance.
   * @param other The existing instance to copy.
   * @return A new OkexSpotTickerAvro RecordBuilder
   */
  public static site.jvbo.fun.okex.crawler.avro.OkexSpotTickerAvro.Builder newBuilder(site.jvbo.fun.okex.crawler.avro.OkexSpotTickerAvro other) {
    return new site.jvbo.fun.okex.crawler.avro.OkexSpotTickerAvro.Builder(other);
  }

  /**
   * RecordBuilder for OkexSpotTickerAvro instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<OkexSpotTickerAvro>
    implements org.apache.avro.data.RecordBuilder<OkexSpotTickerAvro> {

    private java.lang.Long timestamp;
    private java.lang.CharSequence market;
    private java.lang.CharSequence symbol;
    private site.jvbo.fun.okex.crawler.avro.OkexSpotTickerDataAvro data;
    private site.jvbo.fun.okex.crawler.avro.OkexSpotTickerDataAvro.Builder dataBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(site.jvbo.fun.okex.crawler.avro.OkexSpotTickerAvro.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[0].schema(), other.timestamp);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.market)) {
        this.market = data().deepCopy(fields()[1].schema(), other.market);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.symbol)) {
        this.symbol = data().deepCopy(fields()[2].schema(), other.symbol);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.data)) {
        this.data = data().deepCopy(fields()[3].schema(), other.data);
        fieldSetFlags()[3] = true;
      }
      if (other.hasDataBuilder()) {
        this.dataBuilder = site.jvbo.fun.okex.crawler.avro.OkexSpotTickerDataAvro.newBuilder(other.getDataBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing OkexSpotTickerAvro instance
     * @param other The existing instance to copy.
     */
    private Builder(site.jvbo.fun.okex.crawler.avro.OkexSpotTickerAvro other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[0].schema(), other.timestamp);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.market)) {
        this.market = data().deepCopy(fields()[1].schema(), other.market);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.symbol)) {
        this.symbol = data().deepCopy(fields()[2].schema(), other.symbol);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.data)) {
        this.data = data().deepCopy(fields()[3].schema(), other.data);
        fieldSetFlags()[3] = true;
      }
      this.dataBuilder = null;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public java.lang.Long getTimestamp() {
      return timestamp;
    }

    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public site.jvbo.fun.okex.crawler.avro.OkexSpotTickerAvro.Builder setTimestamp(java.lang.Long value) {
      validate(fields()[0], value);
      this.timestamp = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public site.jvbo.fun.okex.crawler.avro.OkexSpotTickerAvro.Builder clearTimestamp() {
      timestamp = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'market' field.
      * @return The value.
      */
    public java.lang.CharSequence getMarket() {
      return market;
    }

    /**
      * Sets the value of the 'market' field.
      * @param value The value of 'market'.
      * @return This builder.
      */
    public site.jvbo.fun.okex.crawler.avro.OkexSpotTickerAvro.Builder setMarket(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.market = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'market' field has been set.
      * @return True if the 'market' field has been set, false otherwise.
      */
    public boolean hasMarket() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'market' field.
      * @return This builder.
      */
    public site.jvbo.fun.okex.crawler.avro.OkexSpotTickerAvro.Builder clearMarket() {
      market = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'symbol' field.
      * @return The value.
      */
    public java.lang.CharSequence getSymbol() {
      return symbol;
    }

    /**
      * Sets the value of the 'symbol' field.
      * @param value The value of 'symbol'.
      * @return This builder.
      */
    public site.jvbo.fun.okex.crawler.avro.OkexSpotTickerAvro.Builder setSymbol(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.symbol = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'symbol' field has been set.
      * @return True if the 'symbol' field has been set, false otherwise.
      */
    public boolean hasSymbol() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'symbol' field.
      * @return This builder.
      */
    public site.jvbo.fun.okex.crawler.avro.OkexSpotTickerAvro.Builder clearSymbol() {
      symbol = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'data' field.
      * @return The value.
      */
    public site.jvbo.fun.okex.crawler.avro.OkexSpotTickerDataAvro getData() {
      return data;
    }

    /**
      * Sets the value of the 'data' field.
      * @param value The value of 'data'.
      * @return This builder.
      */
    public site.jvbo.fun.okex.crawler.avro.OkexSpotTickerAvro.Builder setData(site.jvbo.fun.okex.crawler.avro.OkexSpotTickerDataAvro value) {
      validate(fields()[3], value);
      this.dataBuilder = null;
      this.data = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'data' field has been set.
      * @return True if the 'data' field has been set, false otherwise.
      */
    public boolean hasData() {
      return fieldSetFlags()[3];
    }

    /**
     * Gets the Builder instance for the 'data' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public site.jvbo.fun.okex.crawler.avro.OkexSpotTickerDataAvro.Builder getDataBuilder() {
      if (dataBuilder == null) {
        if (hasData()) {
          setDataBuilder(site.jvbo.fun.okex.crawler.avro.OkexSpotTickerDataAvro.newBuilder(data));
        } else {
          setDataBuilder(site.jvbo.fun.okex.crawler.avro.OkexSpotTickerDataAvro.newBuilder());
        }
      }
      return dataBuilder;
    }

    /**
     * Sets the Builder instance for the 'data' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public site.jvbo.fun.okex.crawler.avro.OkexSpotTickerAvro.Builder setDataBuilder(site.jvbo.fun.okex.crawler.avro.OkexSpotTickerDataAvro.Builder value) {
      clearData();
      dataBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'data' field has an active Builder instance
     * @return True if the 'data' field has an active Builder instance
     */
    public boolean hasDataBuilder() {
      return dataBuilder != null;
    }

    /**
      * Clears the value of the 'data' field.
      * @return This builder.
      */
    public site.jvbo.fun.okex.crawler.avro.OkexSpotTickerAvro.Builder clearData() {
      data = null;
      dataBuilder = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public OkexSpotTickerAvro build() {
      try {
        OkexSpotTickerAvro record = new OkexSpotTickerAvro();
        record.timestamp = fieldSetFlags()[0] ? this.timestamp : (java.lang.Long) defaultValue(fields()[0]);
        record.market = fieldSetFlags()[1] ? this.market : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.symbol = fieldSetFlags()[2] ? this.symbol : (java.lang.CharSequence) defaultValue(fields()[2]);
        if (dataBuilder != null) {
          record.data = this.dataBuilder.build();
        } else {
          record.data = fieldSetFlags()[3] ? this.data : (site.jvbo.fun.okex.crawler.avro.OkexSpotTickerDataAvro) defaultValue(fields()[3]);
        }
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<OkexSpotTickerAvro>
    WRITER$ = (org.apache.avro.io.DatumWriter<OkexSpotTickerAvro>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<OkexSpotTickerAvro>
    READER$ = (org.apache.avro.io.DatumReader<OkexSpotTickerAvro>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
