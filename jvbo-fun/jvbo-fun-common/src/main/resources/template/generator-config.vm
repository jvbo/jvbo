<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN" "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<generatorConfiguration>

    <!-- 配置文件 -->
    <properties resource="generator.properties"></properties>

    <context id="MysqlContext" targetRuntime="MyBatis3" defaultModelType="flat">
    
        <!-- 当表名或者字段名为SQL关键字的时候,MBG给表明添加分隔符 -->
        <property name="autoDelimitKeywords" value="true" />
        <property name="javaFileEncoding" value="UTF-8"/>
        <!-- 由于beginningDelimiter和endingDelimiter的默认值为双引号(")，在Mysql中不能这么写，所以还要将这两个默认值改为`  -->
        <property name="beginningDelimiter" value="`"/>
        <property name="endingDelimiter" value="`"/>

        <!-- 为生成的Java模型创建一个toString方法 -->
        <plugin type="org.mybatis.generator.plugins.ToStringPlugin"></plugin>
        <!-- Java模型生成equals和hashcode方法 -->
        <plugin type="org.mybatis.generator.plugins.EqualsHashCodePlugin"></plugin>
        <!-- 为生成的Java模型类添加序列化接口，并生成serialVersionUID字段 -->
        <plugin type="org.mybatis.generator.plugins.SerializablePlugin" />
        <!-- 自定义插件-mapper的xml文件每次重新生成 -->
        <plugin type="site.jvbo.fun.common.mybatis.plugin.OverIsMergeablePlugin"></plugin>
        
        <!-- 生成的代码去掉注释 -->
        <commentGenerator>
            <property name="suppressAllComments" value="true" />
        </commentGenerator>

        <!-- 数据库连接 -->
        <jdbcConnection driverClass="${generator.jdbc.driver}"
                        connectionURL="${generator.jdbc.url}"
                        userId="${generator.jdbc.username}"
                        password="${generator.jdbc.password}" />

        <!-- model生成 -->
        <javaModelGenerator targetPackage="${generator_javaModelGenerator_targetPackage}" targetProject="${targetProject}/src/main/java" />

        <!-- MapperXML生成 -->
        <sqlMapGenerator targetPackage="${generator_sqlMapGenerator_targetPackage}" targetProject="${targetProject}/src/main/resources" />

        <!-- Mapper接口生成 -->
        <javaClientGenerator targetPackage="${generator_javaClientGenerator_targetPackage}" targetProject="${targetProject}/src/main/java" type="XMLMAPPER" />

        <!-- 需要映射的表 -->
        #foreach($table in $tables)
            #if($last_insert_id_tables.containsKey($!table.table_name) == true)
                <table tableName="$!table.table_name" domainObjectName="$!table.model_name" mapperName="$!table.mapper_name">
                    <generatedKey column="$!last_insert_id_tables.get($!table.table_name)" sqlStatement="MySql" identity="true"/>
                    #foreach($!column in $!table.columns)
                        #if($!{column.data_type} == "TINYINT")
                            <columnOverride column="$!column.column_name" javaType="Integer" jdbcType="$!column.data_type" />
                        #elseif($!{column.data_type} == "TEXT")
                            <columnOverride column="$!column.column_name" javaType="String" jdbcType="VARCHAR" />
                        #else
                            
                        #end
                    #end
                </table>
            #else
                <table tableName="$!table.table_name" domainObjectName="$!table.model_name" mapperName="$!table.mapper_name">
                    #foreach($!column in $!table.columns)
                        #if($!{column.data_type} == "TINYINT")
                            <columnOverride column="$!column.column_name" javaType="Integer" jdbcType="$!column.data_type" />
                        #elseif($!{column.data_type} == "TEXT")
                            <columnOverride column="$!column.column_name" javaType="String" jdbcType="$!column.data_type" />
                        #else
                            
                        #end
                    #end
                </table>
            #end
        #end
    </context>
</generatorConfiguration>
